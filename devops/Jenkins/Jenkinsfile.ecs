pipeline {
    agent any
    environment {
        // Use generic placeholders
        PROJECT_NAME = 'your-project-name'
        ECR_REGISTRY = '${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/'
        APP_ENV = 'qa'
        SERVICE_NAME = 'api-service'
        
        // Docker image naming conventions
        DOCKER_IMAGE = "${ECR_REGISTRY}${PROJECT_NAME}:${APP_ENV}"
        PROXY_DOCKER_IMAGE = "${ECR_REGISTRY}${PROJECT_NAME}-proxy:${APP_ENV}"
        
        // ECS Configuration
        ECS_CLUSTER = 'your-ecs-cluster-name'
        TASK_DEF_NAME = "${SERVICE_NAME}-${APP_ENV}"
        
        // Dockerfiles
        DOCKERFILE = './Dockerfile'
        PROXY_DOCKERFILE = './Dockerfile.nginx'
        
        // AWS Configuration
        AWS_REGION = 'us-east-1'
    }
    
    stages {
        stage('Build PHP Docker Image') {   
            steps {
                script {
                    echo "Building PHP Docker Image for ${SERVICE_NAME}"
                    sh """
                        docker build -t ${DOCKER_IMAGE} -f ${DOCKERFILE} .
                    """
                }
            }
        }
        
        stage('Build Proxy Docker Image') {
            steps {
                script {
                    echo "Building Proxy Docker Image"
                    sh """
                        docker build -t ${PROXY_DOCKER_IMAGE} -f ${PROXY_DOCKERFILE} .
                    """
                }
            }
        }
        
        stage('Push Docker Images') {
            steps {
                script {
                    withAWS(credentials: 'aws-ecr-credentials') {
                        echo "Pushing Docker images to ECR"
                        sh """
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                            docker push ${DOCKER_IMAGE}
                            docker push ${PROXY_DOCKER_IMAGE}
                        """
                    }
                }
            }
        }
        
        stage('Update ECS Task Definition') {
            steps {
                script {
                    def taskDefFile = './devops/taskdefinition/task-definition-qa.json'
                    echo "Registering new ECS task definition from ${taskDefFile}"
                    
                    def newTaskDefArn = sh(script: """
                        aws ecs register-task-definition --cli-input-json file://${taskDefFile} --query 'taskDefinition.taskDefinitionArn' --output text
                    """, returnStdout: true).trim()
                    
                    echo "New task definition registered: ${newTaskDefArn}"
                    env.NEW_TASK_DEF_ARN = newTaskDefArn
                }
            }
        }
        
        stage('Approval Before Deploy') {
            steps {
                script {
                    def userInput = input(
                        message: 'Do you want to proceed with the ECS service update?',
                        ok: 'Yes',
                        parameters: [
                            choice(choices: ['yes', 'no'], description: 'Proceed with ECS deployment?', name: 'Proceed')
                        ]
                    )
                    if (userInput == 'no') {
                        error("Deployment aborted by user.")
                    }
                }
            }
        }
        
        stage('Update ECS Service') {
            steps {
                script {
                    echo "Updating ECS service ${SERVICE_NAME} in cluster ${ECS_CLUSTER}"
                    sh """
                        aws ecs update-service \
                            --cluster ${ECS_CLUSTER} \
                            --service ${SERVICE_NAME} \
                            --task-definition ${env.NEW_TASK_DEF_ARN} \
                            --force-new-deployment \
                            --region ${AWS_REGION}
                    """
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        
        success {
            echo 'Pipeline completed successfully!'
        }
        
        failure {
            echo 'Pipeline failed!'
        }
        
        cleanup {
            script {
                echo 'Cleaning up Docker images...'
                sh """
                    docker rmi ${DOCKER_IMAGE} || true
                    docker rmi ${PROXY_DOCKER_IMAGE} || true
                    docker system prune -f || true
                """
            }
        }
    }
}